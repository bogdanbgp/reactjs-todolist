{
    "sourceFile": "src/App.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1736217715374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736217734704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,20 @@\n import { useState, useEffect } from \"react\"\n import TodoInput from \"./components/TodoInput\"\n import TodoList from \"./components/TodoList\"\n+import Confetti from \"react-confetti\"\n \n function App() {\n   const [todos, setTodos] = useState([])\n   const [todoValue, setTodoValue] = useState('')\n+  const [confetti, setConfetti] = useState(false)\n \n   function persistData(newList) {\n     localStorage.setItem('todos', JSON.stringify({ todos: newList }))\n   }\n \n   function handleAddTodos(newTodo) {\n-    const newTodoList = [...todos, newTodo]\n+    const newTodoList = [...todos, { text: newTodo, isDone: false }]\n     persistData(newTodoList)\n     setTodos(newTodoList)\n   }\n \n@@ -24,13 +26,24 @@\n     setTodos(newTodoList)\n   }\n \n   function handleEditTodo(index) {\n-    const valueToBeEdited = todos[index]\n+    const valueToBeEdited = todos[index].text\n     setTodoValue(valueToBeEdited)\n     handleDeleteTodo(index)\n   }\n \n+  function handleCheckTodo(index) {\n+    const newTodoList = [...todos]\n+    newTodoList[index].isDone = !newTodoList[index].isDone\n+    persistData(newTodoList)\n+    setTodos(newTodoList)\n+\n+    // Trigger confetti when task is marked as done\n+    setConfetti(true)\n+    setTimeout(() => setConfetti(false), 3000) // Hide confetti after 3 seconds\n+  }\n+\n   // add comment here, explain arrow \n   // function and square brackets which are dependency array\n   // note: 1. to listen to the change of a varialbe, pass in a variable in [], example: \"[todos]\"\n   // 2. to run on page load, leave the array empty.\n"
                },
                {
                    "date": 1736218379040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,21 @@\n     newTodoList[index].isDone = !newTodoList[index].isDone\n     persistData(newTodoList)\n     setTodos(newTodoList)\n \n+    // Show confirmation prompt if the task is checked\n+    if (newTodoList[index].isDone) {\n+      const isConfirmed = window.confirm(\"Do you want to remove this item from the list?\");\n+      if (isConfirmed) {\n+        handleDeleteTodo(index); // Delete the todo if confirmed\n+      } else {\n+        // If \"No\" is clicked, just reset the isDone to false\n+        newTodoList[index].isDone = false;\n+        persistData(newTodoList);\n+        setTodos(newTodoList);\n+      }\n+    }\n+\n     // Trigger confetti when task is marked as done\n     setConfetti(true)\n     setTimeout(() => setConfetti(false), 3000) // Hide confetti after 3 seconds\n   }\n@@ -75,5 +88,5 @@\n     </>\n   )\n }\n \n-export default App\n\\ No newline at end of file\n+export default App\n"
                },
                {
                    "date": 1736218572571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,18 +37,13 @@\n     newTodoList[index].isDone = !newTodoList[index].isDone\n     persistData(newTodoList)\n     setTodos(newTodoList)\n \n-    // Show confirmation prompt if the task is checked\n+    // Ask the user if they want to keep the completed task in the list\n     if (newTodoList[index].isDone) {\n-      const isConfirmed = window.confirm(\"Do you want to remove this item from the list?\");\n-      if (isConfirmed) {\n-        handleDeleteTodo(index); // Delete the todo if confirmed\n-      } else {\n-        // If \"No\" is clicked, just reset the isDone to false\n-        newTodoList[index].isDone = false;\n-        persistData(newTodoList);\n-        setTodos(newTodoList);\n+      const isConfirmed = window.confirm(\"You completed this successfully! Do you want to keep it on the list?\");\n+      if (!isConfirmed) {\n+        handleDeleteTodo(index); // Delete the todo if not confirmed\n       }\n     }\n \n     // Trigger confetti when task is marked as done\n"
                },
                {
                    "date": 1736218733795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,12 @@\n function App() {\n   const [todos, setTodos] = useState([])\n   const [todoValue, setTodoValue] = useState('')\n   const [confetti, setConfetti] = useState(false)\n+  const [showModal, setShowModal] = useState(false)\n+  const [modalMessage, setModalMessage] = useState('')\n+  const [currentTodoIndex, setCurrentTodoIndex] = useState(null)\n+  const [actionType, setActionType] = useState('')\n \n   function persistData(newList) {\n     localStorage.setItem('todos', JSON.stringify({ todos: newList }))\n   }\n@@ -18,44 +22,54 @@\n     setTodos(newTodoList)\n   }\n \n   function handleDeleteTodo(index) {\n-    const newTodoList = todos.filter((todo, todoIndex) => {\n-      return todoIndex !== index\n-    })\n+    const newTodoList = todos.filter((todo, todoIndex) => todoIndex !== index)\n     persistData(newTodoList)\n     setTodos(newTodoList)\n+    setShowModal(false)\n   }\n \n   function handleEditTodo(index) {\n     const valueToBeEdited = todos[index].text\n     setTodoValue(valueToBeEdited)\n-    handleDeleteTodo(index)\n+    handleDeleteTodo(index) // Delete the item for editing\n   }\n \n   function handleCheckTodo(index) {\n     const newTodoList = [...todos]\n     newTodoList[index].isDone = !newTodoList[index].isDone\n     persistData(newTodoList)\n     setTodos(newTodoList)\n \n-    // Ask the user if they want to keep the completed task in the list\n-    if (newTodoList[index].isDone) {\n-      const isConfirmed = window.confirm(\"You completed this successfully! Do you want to keep it on the list?\");\n-      if (!isConfirmed) {\n-        handleDeleteTodo(index); // Delete the todo if not confirmed\n-      }\n-    }\n+    // Show the modal for completion with message\n+    setModalMessage('You completed this successfully! Do you want to keep it on the list?')\n+    setActionType('check')\n+    setCurrentTodoIndex(index)\n+    setShowModal(true)\n \n     // Trigger confetti when task is marked as done\n     setConfetti(true)\n     setTimeout(() => setConfetti(false), 3000) // Hide confetti after 3 seconds\n   }\n \n-  // add comment here, explain arrow \n-  // function and square brackets which are dependency array\n-  // note: 1. to listen to the change of a varialbe, pass in a variable in [], example: \"[todos]\"\n-  // 2. to run on page load, leave the array empty.\n+  function handleModalAction(isConfirmed) {\n+    if (isConfirmed) {\n+      if (actionType === 'delete') {\n+        handleDeleteTodo(currentTodoIndex)\n+      } else if (actionType === 'check') {\n+        const newTodoList = [...todos]\n+        if (!newTodoList[currentTodoIndex].isDone) {\n+          newTodoList[currentTodoIndex].isDone = true\n+          persistData(newTodoList)\n+          setTodos(newTodoList)\n+        }\n+      }\n+    } else {\n+      setShowModal(false) // Close the modal if the action is canceled\n+    }\n+  }\n+\n   useEffect(() => {\n     if (!localStorage) {\n       return\n     }\n@@ -75,12 +89,28 @@\n       {confetti && <Confetti />}\n       <TodoInput todoValue={todoValue} setTodoValue={setTodoValue} handleAddTodos={handleAddTodos} />\n       <TodoList \n         handleEditTodo={handleEditTodo} \n-        handleDeleteTodo={handleDeleteTodo} \n+        handleDeleteTodo={(index) => {\n+          setModalMessage('Are you sure you want to delete this item?')\n+          setActionType('delete')\n+          setCurrentTodoIndex(index)\n+          setShowModal(true)\n+        }} \n         handleCheckTodo={handleCheckTodo} \n         todos={todos} \n       />\n+\n+      {/* Custom Modal */}\n+      {showModal && (\n+        <div className=\"modal\">\n+          <div className=\"modal-content\">\n+            <p>{modalMessage}</p>\n+            <button onClick={() => handleModalAction(true)}>Yes</button>\n+            <button onClick={() => handleModalAction(false)}>No</button>\n+          </div>\n+        </div>\n+      )}\n     </>\n   )\n }\n \n"
                },
                {
                    "date": 1736218916362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,8 @@\n function App() {\n   const [todos, setTodos] = useState([])\n   const [todoValue, setTodoValue] = useState('')\n   const [confetti, setConfetti] = useState(false)\n-  const [showModal, setShowModal] = useState(false)\n-  const [modalMessage, setModalMessage] = useState('')\n-  const [currentTodoIndex, setCurrentTodoIndex] = useState(null)\n-  const [actionType, setActionType] = useState('')\n \n   function persistData(newList) {\n     localStorage.setItem('todos', JSON.stringify({ todos: newList }))\n   }\n@@ -22,54 +18,44 @@\n     setTodos(newTodoList)\n   }\n \n   function handleDeleteTodo(index) {\n-    const newTodoList = todos.filter((todo, todoIndex) => todoIndex !== index)\n+    const newTodoList = todos.filter((todo, todoIndex) => {\n+      return todoIndex !== index\n+    })\n     persistData(newTodoList)\n     setTodos(newTodoList)\n-    setShowModal(false)\n   }\n \n   function handleEditTodo(index) {\n     const valueToBeEdited = todos[index].text\n     setTodoValue(valueToBeEdited)\n-    handleDeleteTodo(index) // Delete the item for editing\n+    handleDeleteTodo(index)\n   }\n \n   function handleCheckTodo(index) {\n     const newTodoList = [...todos]\n     newTodoList[index].isDone = !newTodoList[index].isDone\n     persistData(newTodoList)\n     setTodos(newTodoList)\n \n-    // Show the modal for completion with message\n-    setModalMessage('You completed this successfully! Do you want to keep it on the list?')\n-    setActionType('check')\n-    setCurrentTodoIndex(index)\n-    setShowModal(true)\n+    // Ask the user if they want to keep the completed task in the list\n+    if (newTodoList[index].isDone) {\n+      const isConfirmed = window.confirm(\"You completed this successfully! Do you want to keep it on the list?\");\n+      if (!isConfirmed) {\n+        handleDeleteTodo(index); // Delete the todo if not confirmed\n+      }\n+    }\n \n     // Trigger confetti when task is marked as done\n     setConfetti(true)\n     setTimeout(() => setConfetti(false), 3000) // Hide confetti after 3 seconds\n   }\n \n-  function handleModalAction(isConfirmed) {\n-    if (isConfirmed) {\n-      if (actionType === 'delete') {\n-        handleDeleteTodo(currentTodoIndex)\n-      } else if (actionType === 'check') {\n-        const newTodoList = [...todos]\n-        if (!newTodoList[currentTodoIndex].isDone) {\n-          newTodoList[currentTodoIndex].isDone = true\n-          persistData(newTodoList)\n-          setTodos(newTodoList)\n-        }\n-      }\n-    } else {\n-      setShowModal(false) // Close the modal if the action is canceled\n-    }\n-  }\n-\n+  // add comment here, explain arrow \n+  // function and square brackets which are dependency array\n+  // note: 1. to listen to the change of a varialbe, pass in a variable in [], example: \"[todos]\"\n+  // 2. to run on page load, leave the array empty.\n   useEffect(() => {\n     if (!localStorage) {\n       return\n     }\n@@ -89,28 +75,12 @@\n       {confetti && <Confetti />}\n       <TodoInput todoValue={todoValue} setTodoValue={setTodoValue} handleAddTodos={handleAddTodos} />\n       <TodoList \n         handleEditTodo={handleEditTodo} \n-        handleDeleteTodo={(index) => {\n-          setModalMessage('Are you sure you want to delete this item?')\n-          setActionType('delete')\n-          setCurrentTodoIndex(index)\n-          setShowModal(true)\n-        }} \n+        handleDeleteTodo={handleDeleteTodo} \n         handleCheckTodo={handleCheckTodo} \n         todos={todos} \n       />\n-\n-      {/* Custom Modal */}\n-      {showModal && (\n-        <div className=\"modal\">\n-          <div className=\"modal-content\">\n-            <p>{modalMessage}</p>\n-            <button onClick={() => handleModalAction(true)}>Yes</button>\n-            <button onClick={() => handleModalAction(false)}>No</button>\n-          </div>\n-        </div>\n-      )}\n     </>\n   )\n }\n \n"
                },
                {
                    "date": 1736220131446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,25 +37,19 @@\n     newTodoList[index].isDone = !newTodoList[index].isDone\n     persistData(newTodoList)\n     setTodos(newTodoList)\n \n-    // Ask the user if they want to keep the completed task in the list\n     if (newTodoList[index].isDone) {\n-      const isConfirmed = window.confirm(\"You completed this successfully! Do you want to keep it on the list?\");\n+      const isConfirmed = window.confirm(\"Press OK to keep it on the list and Cancel to remove it from the list\")\n       if (!isConfirmed) {\n-        handleDeleteTodo(index); // Delete the todo if not confirmed\n+        handleDeleteTodo(index)\n       }\n     }\n \n-    // Trigger confetti when task is marked as done\n     setConfetti(true)\n-    setTimeout(() => setConfetti(false), 3000) // Hide confetti after 3 seconds\n+    setTimeout(() => setConfetti(false), 3000)\n   }\n \n-  // add comment here, explain arrow \n-  // function and square brackets which are dependency array\n-  // note: 1. to listen to the change of a varialbe, pass in a variable in [], example: \"[todos]\"\n-  // 2. to run on page load, leave the array empty.\n   useEffect(() => {\n     if (!localStorage) {\n       return\n     }\n"
                },
                {
                    "date": 1736220152761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,19 +37,30 @@\n     newTodoList[index].isDone = !newTodoList[index].isDone\n     persistData(newTodoList)\n     setTodos(newTodoList)\n \n+    // Show confirmation prompt if the task is checked\n     if (newTodoList[index].isDone) {\n-      const isConfirmed = window.confirm(\"Press OK to keep it on the list and Cancel to remove it from the list\")\n-      if (!isConfirmed) {\n-        handleDeleteTodo(index)\n+      const isConfirmed = window.confirm(\"Do you want to remove this item from the list?\");\n+      if (isConfirmed) {\n+        handleDeleteTodo(index); // Delete the todo if confirmed\n+      } else {\n+        // If \"No\" is clicked, just reset the isDone to false\n+        newTodoList[index].isDone = false;\n+        persistData(newTodoList);\n+        setTodos(newTodoList);\n       }\n     }\n \n+    // Trigger confetti when task is marked as done\n     setConfetti(true)\n-    setTimeout(() => setConfetti(false), 3000)\n+    setTimeout(() => setConfetti(false), 3000) // Hide confetti after 3 seconds\n   }\n \n+  // add comment here, explain arrow \n+  // function and square brackets which are dependency array\n+  // note: 1. to listen to the change of a varialbe, pass in a variable in [], example: \"[todos]\"\n+  // 2. to run on page load, leave the array empty.\n   useEffect(() => {\n     if (!localStorage) {\n       return\n     }\n"
                },
                {
                    "date": 1736220165994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,18 +37,13 @@\n     newTodoList[index].isDone = !newTodoList[index].isDone\n     persistData(newTodoList)\n     setTodos(newTodoList)\n \n-    // Show confirmation prompt if the task is checked\n+    // Ask the user if they want to keep the completed task in the list\n     if (newTodoList[index].isDone) {\n-      const isConfirmed = window.confirm(\"Do you want to remove this item from the list?\");\n-      if (isConfirmed) {\n-        handleDeleteTodo(index); // Delete the todo if confirmed\n-      } else {\n-        // If \"No\" is clicked, just reset the isDone to false\n-        newTodoList[index].isDone = false;\n-        persistData(newTodoList);\n-        setTodos(newTodoList);\n+      const isConfirmed = window.confirm(\"You completed this successfully! Do you want to keep it on the list?\");\n+      if (!isConfirmed) {\n+        handleDeleteTodo(index); // Delete the todo if not confirmed\n       }\n     }\n \n     // Trigger confetti when task is marked as done\n"
                },
                {
                    "date": 1736220230751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     setTodos(newTodoList)\n \n     // Ask the user if they want to keep the completed task in the list\n     if (newTodoList[index].isDone) {\n-      const isConfirmed = window.confirm(\"You completed this successfully! Do you want to keep it on the list?\");\n+      const isConfirmed = window.confirm(\"You completed this successfully! Press OK to keep it on the list and Cancel to remove it from the list\");\n       if (!isConfirmed) {\n         handleDeleteTodo(index); // Delete the todo if not confirmed\n       }\n     }\n"
                },
                {
                    "date": 1736220277901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     setTodos(newTodoList)\n \n     // Ask the user if they want to keep the completed task in the list\n     if (newTodoList[index].isDone) {\n-      const isConfirmed = window.confirm(\"You completed this successfully! Press OK to keep it on the list and Cancel to remove it from the list\");\n+      const isConfirmed = window.confirm(\"You completed this successfully! Do you want to keep it on the list?\");\n       if (!isConfirmed) {\n         handleDeleteTodo(index); // Delete the todo if not confirmed\n       }\n     }\n"
                }
            ],
            "date": 1736217715374,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from \"react\"\nimport TodoInput from \"./components/TodoInput\"\nimport TodoList from \"./components/TodoList\"\n\nfunction App() {\n  const [todos, setTodos] = useState([])\n  const [todoValue, setTodoValue] = useState('')\n\n  function persistData(newList) {\n    localStorage.setItem('todos', JSON.stringify({ todos: newList }))\n  }\n\n  function handleAddTodos(newTodo) {\n    const newTodoList = [...todos, newTodo]\n    persistData(newTodoList)\n    setTodos(newTodoList)\n  }\n\n  function handleDeleteTodo(index) {\n    const newTodoList = todos.filter((todo, todoIndex) => {\n      return todoIndex !== index\n    })\n    persistData(newTodoList)\n    setTodos(newTodoList)\n  }\n\n  function handleEditTodo(index) {\n    const valueToBeEdited = todos[index]\n    setTodoValue(valueToBeEdited)\n    handleDeleteTodo(index)\n  }\n\n  // add comment here, explain arrow \n  // function and square brackets which are dependency array\n  // note: 1. to listen to the change of a varialbe, pass in a variable in [], example: \"[todos]\"\n  // 2. to run on page load, leave the array empty.\n  useEffect(() => {\n    if (!localStorage) {\n      return\n    }\n\n    let localTodos = localStorage.getItem('todos')\n    if (!localTodos) {\n      return\n    }\n\n    localTodos = JSON.parse(localTodos).todos\n    setTodos(localTodos)\n\n  }, [])\n\n  return (\n    <>\n      {confetti && <Confetti />}\n      <TodoInput todoValue={todoValue} setTodoValue={setTodoValue} handleAddTodos={handleAddTodos} />\n      <TodoList \n        handleEditTodo={handleEditTodo} \n        handleDeleteTodo={handleDeleteTodo} \n        handleCheckTodo={handleCheckTodo} \n        todos={todos} \n      />\n    </>\n  )\n}\n\nexport default App"
        }
    ]
}